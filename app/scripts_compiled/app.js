(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var __moduleName = "app/scripts/app";
'use strict';
var angular = (window.angular);
var log = (function(msg) {
  console.log(msg);
});
angular.module('flowbarApp', ['ngCookies', 'ngResource', 'ngSanitize', 'ngRoute']).config(['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    template: require('../views/main.html'),
    controller: require('./controllers/main')
  }).when('/things', {
    template: require('../views/things.html'),
    controller: require('./controllers/thing')
  }).otherwise({redirectTo: '/'});
  log('Started');
}]);


},{"../views/main.html":4,"../views/things.html":5,"./controllers/main":2,"./controllers/thing":3}],2:[function(require,module,exports){
"use strict";
var __moduleName = "app/scripts/controllers/main";
"use strict";
module.exports = ['$scope', function MainCtrl($scope) {
  $scope.awesomeThings = ['HTML5 Boilerplate', 'AngularJS', 'Karma'];
}];


},{}],3:[function(require,module,exports){
"use strict";
var __moduleName = "app/scripts/controllers/thing";
"use strict";
var __moduleName = "app/scripts/controllers/thing";
'use strict';
var Thing = require('../../../lib/models/thing');
module.exports = ['$scope', '$http', function ThingCtrl($scope, $http) {
  $http.get('/api/awesomeThings').success(function(awesomeThings) {
    $scope.awesomeThings = Thing.createFromArray(awesomeThings);
  });
}];


},{"../../../lib/models/thing":6}],4:[function(require,module,exports){
module.exports = '<div class="header">\n  <ul class="nav nav-pills pull-right">\n    <li class="active"><a ng-href="#">Home</a></li>\n    <li><a ng-href="#">About</a></li>\n    <li><a ng-href="#">Contact</a></li>\n  </ul>\n  <h3 class="text-muted">flowbar</h3>\n</div>\n\n<div class="jumbotron">\n  <h1>\'Allo, \'Allo!</h1>\n  <p class="lead">\n    <img src="images/yeoman.png" alt="I\'m Yeoman"><br>\n    Always a pleasure scaffolding your apps.\n  </p>\n  <p><a class="btn btn-lg btn-success" ng-href="#">Splendid!<span class="glyphicon glyphicon-ok"></span></a></p>\n</div>\n\n<div class="row marketing">\n  <h4>HTML5 Boilerplate</h4>\n  <p>\n    HTML5 Boilerplate is a professional front-end template for building fast, robust, and adaptable web apps or sites.\n  </p>\n\n  <h4>Angular</h4>\n  <p>\n    AngularJS is a toolset for building the framework most suited to your application development.\n  </p>\n\n  <h4>Karma</h4>\n  <p>Spectacular Test Runner for JavaScript.</p>\n</div>\n\n<div class="footer">\n  <p><span class="glyphicon glyphicon-heart"></span> from the Yeoman team</p>\n</div>\n';
},{}],5:[function(require,module,exports){
module.exports = '<div class="header">\n    <ul class="nav nav-pills pull-right">\n        <li class="active"><a ng-href="#">Home</a></li>\n        <li><a ng-href="#">About</a></li>\n        <li><a ng-href="#">Contact</a></li>\n    </ul>\n    <h3 class="text-muted">flowbar</h3>\n</div>\n\n<div class="row marketing">\n    <div ng-repeat="thing in awesomeThings">\n        <h4>{{ thing.getName() }}</h4>\n        <p>{{ thing.info }}</p>\n    </div>\n</div>\n\n<div class="footer">\n    <p><span class="glyphicon glyphicon-heart"></span> from the Yeoman team</p>\n</div>\n';
},{}],6:[function(require,module,exports){
"use strict";
var __moduleName = "lib/models/thing";
"use strict";
var __moduleName = "lib/models/thing";
"use strict";
var Thing = function(dataObject) {
  this.name = dataObject.name;
  this.info = dataObject.info;
  this.awesomeness = dataObject.awesomeness;
};
Thing.prototype = {getName: function() {
    return 'Mr. ' + this.name;
  }};
Thing.createFromArray = function(dataObjects) {
  return dataObjects.map(function(dataObject) {
    return new Thing(dataObject);
  });
};
module.exports = Thing;


},{}]},{},[1,2,3])
//# sourceMappingURL=data:application/json;base64,
